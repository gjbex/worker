[%shebang%]
[%pbs%]

# load appropriate MPI implementation module
[%IF unload_modules%]module unload [%unload_modules%][%END%]
module purge
module use [%module_path%]
module load [%mpi_module%]

# set worker application and options
WORKER_APPL="[%worker%]"

# get the job ID and to compute appropriate names
WORKER_JOBID=`echo $PBS_JOBID | sed 's/\([0-9][0-9]*\).*/\1/'`

# change to the working directory
cd $PBS_O_WORKDIR

# rename artifacts consistently with job name and ID scheme
mv [%dir%][%basename%][%batch_ext%] [%default_sh%]
mv [%dir%][%basename%][%run_ext%] [%default_run%]
mv [%dir%][%pbs_file%] [%default_pbs%]

# compute prolog option
[%IF prolog%]cp [%dir%][%prolog%] [%default_pro%][%END%]
WORKER_PROLOG="[%IF prolog%]-p [%default_pro%][%END%]"

# master sleep time to avoid MPI_Test spinning load
WORKER_SLEEP="[%IF sleep%]-s [%sleep%][%END%]"

# compute batch option
WORKER_BATCH="-b [%default_sh%]"

# compute epilog option
[%IF epilog%]cp [%dir%][%epilog%] [%default_epi%][%END%]
WORKER_EPILOG="[%IF epilog%]-e [%default_epi%][%END%]"

rm -rf [%dir%]

# determine the number of processes to run, modify later if master
# or threaded switch is active
n_proc=$(cat ${PBS_NODEFILE} | wc -l)

# only applicable when the master switch is on
# create host file to use for this job and compute number of cores
[%IF master%]
    mom=`head -1 $PBS_NODEFILE`
    echo $mom > [%default_host%]
    cat $PBS_NODEFILE >> [%default_host%]
    HOST_FILE="-machinefile [%default_host%]"
    n_proc=$(( ${n_proc} + 1 ))
    mpi_opt="${HOST_FILE} -np ${n_proc}"
[%END%]

# only applicable when the threaded swith is on
[%IF threaded%]
    n_nodes=$(cat ${PBS_NODEFILE} | uniq | wc -l)
    n_cores=$(nproc)
    omp="[%ppn%]"
    ppn=$(( ${n_cores} / ${omp} ))
    ppn_opt="-ppn ${ppn}"
    mpi=$(( ${n_nodes} * ${ppn} ))
    [%IF master%]
        mpi=$(( ${mpi} + 1 ))
        mom=`head -1 $PBS_NODEFILE`
        echo $mom > [%default_host%]
    [%END%]
    for host in $(cat ${PBS_NODEFILE} | uniq); do
        for i in $(seq ${ppn}); do
            echo ${host} >> [%default_host%]
        done
    done
    HOST_FILE="-machinefile [%default_host%]"
    mpi_opt="${HOST_FILE} -np ${mpi}"
# set thread option for worker
    WORKER_THREADS="-t $omp"
# ensure that mpirun doesn't igonre parameters, which it does when running
# under torque
    export I_MPI_JOB_RESPECT_PROCESS_PLACEMENT=disable
# ensure correct distribution of processes over sockets
    export OMP_NUM_THREADS=$omp
    export I_MPI_PIN_DOMAIN=omp:compact
    export KMP_AFFINITY=compact
[%END%]

# compute log option
WORKER_LOG_FILE="-l [%logfile%]"

# compute verbose option
WORKER_VERBOSE="[%IF verbose%]-v[%END%]"

# start the worker
[%mpirun%] [%mpirun_options%] ${mpi_opt} ${ppn_opt} \
    "${WORKER_APPL}" ${WORKER_PROLOG} ${WORKER_BATCH} ${WORKER_EPILOG} \
                   ${WORKER_LOG_FILE} ${WORKER_VERBOSE} ${WORKER_SLEEP} \
                   ${WORKER_THREADS}
